using Microsoft.AspNetCore.Mvc; // To use ProblemDetails
using Northwind.EntityModels; // for Customer
using Northwind.WebApi.Repositories; // for ICustomerRepository

/// <summary>
/// Customer-related endpoints.
/// </summary>
static partial class Program
{
    /// <summary>
    /// Map customer-related endpoints.
    /// </summary>
    /// <param name="app">The web application.</param>
    internal static void MapCustomers(this WebApplication app)
    {
        // Retrieve all customers
        app.MapGet(
            pattern: "/customers",
            handler: async (ICustomerRepository repo) =>
            {
                return await repo.RetrieveAllAsync();
            });

        // Retrieve all customer of country
        app.MapGet(
            pattern: "/customers/in/{country}",
            handler:
                async (string country, ICustomerRepository repo) =>
                {
                    // Filter customers by country
                    // Current implementation is inefficient for large datasets, because it retrieves all customers and after that filters them. Possibly used by Price to simplify the code.
                    // TODO: Implement a repository method that returns a filtered list of customers without retrieving all customers first.
                    return (await repo.RetrieveAllAsync())
                                .Where(customer => customer.Country == country);
                }
            );

        /// <summary>
        /// Retrieve a customer by id. This is also an example for the use of the regex constraint and a cancellation token.
        /// </summary>
        /// <param name="id">The id of the customer.</param>
        /// <param name="repo">The customer repository.</param>
        /// <param name="token">The cancellation token.</param>
        /// <returns>The customer.</returns>
        app.MapGet(
            pattern: "/customers/{id:regex(^[A-Z]{{5}}$)}",

            handler:

                async Task<IResult> (
                string id,
                ICustomerRepository repo,
                CancellationToken token = default) =>
                {
                    Customer? c = await repo.RetrieveAsync(id, token);
                    if (c is null)
                    {
                        return TypedResults.NotFound(); // 404 Not Found
                    }
                    return TypedResults.Ok(c); // 200 OK
                }
        ).WithName("GetCustomer"); // Name of the route added because it's used in the CreatedAtRoute of the Create customer method

        /// <summary>
        /// Create a new customer.
        /// </summary>
        /// <param name="c">A Customer object with the data for the new customer in the database.</param>
        /// <param name="repo">The customer repository.</param>
        /// <returns>The created customer or a 400 Bad Request if creation failed.</returns>
        /// <remarks>
        /// The customer ID is possibly generated by the database.
        /// </remarks>
        app.MapPost(
            pattern: "/customers",
            handler:
            async Task<IResult> (Customer c, ICustomerRepository repo) =>
            {
                if (c is null)
                {
                    return TypedResults.BadRequest(); // 400 Bad Request
                }

                Customer? addedCustomer = await repo.CreateAsync(c);

                if (addedCustomer is null)
                {
                    return TypedResults.BadRequest("Repository failed to create customer."); // 400 Bad Request
                }
                else
                {
                    return TypedResults.CreatedAtRoute( // 201 Created
                        routeName: "GetCustomer", // The name of the route to use for the URL   
                        routeValues:
                            new { id = addedCustomer.CustomerId.ToLower() }, // The route values to use for the URL
                        value: addedCustomer); // The new customer
                }
            }
        );

        /// <summary>
        /// Update a customer.
        /// </summary>
        /// <param name="c">A Customer object with the data for the new customer in the database.</param>
        /// <param name="id">The id of the customer.</param>
        /// <param name="repo">The customer repository.</param>
        /// <returns>A 204 No Content response if the customer is updated successfully, or a 400 Bad Request if the customer is not found or the data is invalid.</returns>
        app.MapPut(
            pattern: "/customers/{id:regex(^[A-Z]{{5}}$)}",
            handler:
                async Task<IResult> (
                    Customer c,
                    string id,
                    ICustomerRepository repo,
                    CancellationToken token = default) =>
                {
                    id = id.ToUpper();
                    c.CustomerId = c.CustomerId.ToUpper();
                    if (c is null || c.CustomerId != id)
                    {
                        return TypedResults.BadRequest(); // 400 Bad Request
                    }

                    Customer? existing = await repo.RetrieveAsync(id, token);
                    if (existing is null)
                    {
                        return TypedResults.NotFound(); // 404 Not Found
                    }

                    await repo.UpdateAsync(c);

                    return TypedResults.NoContent(); // 204 No Content
                }
        );

        // Map an HTTP DELETE endpoint for deleting a customer by ID.
        // The route expects an ID matching exactly 5 uppercase letters (A-Z).
        app.MapDelete(
            pattern: "/customers/{id:regex(^[A-Z]{{5}}$)}",
            handler:
                // Handler for the DELETE request.
                // Parameters:
                //   id   - The customer ID from the route.
                //   repo - The customer repository (injected).
                //   token - Optional cancellation token.
                async Task<IResult> (
                    string id,
                    ICustomerRepository repo,
                    CancellationToken token = default) =>
                {
                    // Take control of problem details. (Example)
                    if (id == "BAD")
                    {
                        ProblemDetails problemDetails = new()
                        {
                            Status = StatusCodes.Status400BadRequest,
                            Type = $"https://localhost:5151/customers/failed-to-delete",
                            Title = $"Customer ID {id} found but failed to delete.",
                            Detail = "More details like Company Name, Country, etc."
                        };
                        return TypedResults.Problem(problemDetails); // 400 Bad Request
                    }
                    
                    // Try to retrieve the customer by ID.
                    Customer? existing = await repo.RetrieveAsync(id, token);
                    if (existing is null)
                    {
                        // If not found, return 404 Not Found.
                        return TypedResults.NotFound();
                    }

                    // Attempt to delete the customer.
                    bool? deleted = await repo.DeleteAsync(id);

                    if (deleted.HasValue && deleted.Value) // short-circuiting
                    {
                        // If deletion succeeded, return 204 No Content.
                        return TypedResults.NoContent();
                    }
                    else
                    {
                        // If deletion failed, return 400 Bad Request with a message.
                        return TypedResults.BadRequest(
                            $"Customer {id} was found but failed to delete."
                        );
                    }
                }
        );
    }
}
